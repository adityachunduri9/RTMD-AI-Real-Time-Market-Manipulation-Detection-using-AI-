import numpy as np
import pandas as pd
from sklearn.ensemble import IsolationForest
import matplotlib.pyplot as plt
import seaborn as sns

# 1. Generate mock trading data
np.random.seed(42)
dates = pd.date_range(start="2023-01-01", periods=100)
stock_price = np.cumsum(np.random.normal(0.5, 2, size=100)) + 100
volume = np.random.normal(10000, 2000, size=100)

# 2. Inject pump and dump scenario
stock_price[70:75] += np.linspace(10, 30, 5)       # Pump in price
volume[70:75] += np.linspace(5000, 15000, 5)       # Pump in volume

stock_price[75:80] -= np.linspace(30, 10, 5)       # Dump in price
volume[75:80] += np.linspace(10000, 2000, 5)       # Still high volume

# 3. Create DataFrame
data = pd.DataFrame({
    "date": dates,
    "price": stock_price,
    "volume": volume
})

# 4. Feature engineering
data["price_change"] = data["price"].pct_change().fillna(0)
data["volume_change"] = data["volume"].pct_change().fillna(0)

# 5. Apply Isolation Forest for anomaly detection
features = data[["price_change", "volume_change"]]
model = IsolationForest(contamination=0.05, random_state=42)
data["anomaly_score"] = model.fit_predict(features)

# 6. Plot the price chart and highlight anomalies
plt.figure(figsize=(14, 6))
sns.lineplot(data=data, x="date", y="price", label="Price")
anomalies = data[data["anomaly_score"] == -1]
plt.scatter(anomalies["date"], anomalies["price"], color="red", label="Anomalies", s=100)
plt.title("Anomaly Detection in Stock Prices (Pump and Dump Simulation)")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# 7. Print detected anomalies
print("Detected Anomalies:")
print(anomalies[["date", "price", "volume", "price_change", "volume_change"]])
